---
title: "DataLens SF Bay, Specific For RH fleet size AND price"
author: "Annika Nazanin Carlos"
date: "`r {Sys.Date()}`"
format:
  html:
    toc: true
    code-fold: true
    self-contained: true
    fontsize: 10px
    linestretch: 1
echo: false
output-file: "2022_10_19"
params:
  place: "SanFrancisco"
  placeTitleShort: "sf"
  year: 2018
  category_rh:    TRUE
  lever_flsz:     FALSE
  category_tr:  FALSE
  lever_fq:     FALSE
  lever_priceXfleetsz: TRUE
  lever_title_short: "priceXfleetsz"
  lever_short_name: "lever_priceXfleetsz"
  subset________: "___ subset by ____________________"
  HomeToMandatory: TRUE
  MandatoryToHome: FALSE
  MandatoryToMandatory: FALSE
  yvars________: "___ y variables ____________________"
  yvar_doorDoor:    TRUE
  yvar_potInex:     false
  yvar_realInex:    false
  yvar_socInex:     false
  yvar_mode:        false
  yvar_carbon:      false
  het________: "___heterogeneity variables_____"
  hetvar_incXcar:   TRUE
  hetvar_carOwn:    TRUE
  hetvar_Inc10hiLo: TRUE
  hetvar_mode:      TRUE
  useAWStoReadWrite: FALSE
editor_options: 
  chunk_output_type: inline
---

# Setup - Start ---Boilerplate

```{r}
usingOwnFile <- TRUE
ignoreAWS <- TRUE
# thisFolder <- 
```

Libraries and functions, and define a directory if one exists on this machine. Open the csv file that lists all of the titles and colors etc

```{r }
source(paste0            (getwd(),    "/00__global_file_directories.R"))
source(paste0            (getwd(),    "/02__SetupLibrary.R"))
source(paste0            (getwd(),    "/04__SetupFunctions.R"))
source(paste0            (getwd(),    "/40__TableFunctions.R"))
source(paste0            (getwd(),    "/50__GraphFunctions.R"))
```

Get the proper titles and names that we want to use for graphs etc

```{r }
# open the csv file
Sys.setenv("AWS_DEFAULT_REGION"="us-east-2", TZ='GMT')
if (ignoreAWS==FALSE) {description_CSV <- aws.s3::s3read_using(read_csv,
                                        object = "03__MasterTitlesNamesColorsEtc.csv",
                                        bucket = "beam-core-act")}
if (usingOwnFile==TRUE) {description_CSV <- read_csv(file =     "03__MasterTitlesNamesColorsEtc.csv")}
# extract the variable names from the excel sheet
descr <- fx_proper_Names()
descr
```

define other vars

```{r }
# get other names from the yaml at the top
placeTitleShort <- "sf"
year <- "2018"
leverTitleShort <- "priceXfleetsz"
categoryTitleShort <- "rh"
```

Find the dataset

```{r}
# Find the name of the dataset in AWS, or on your own computer
# First make a dataframe with the list of relevant files
if (ignoreAWS==FALSE) {awsDF <- get_bucket_df("beam-core-act", 
                       prefix = "deepDive/CleanData/SanFrancisco")} # dataframe with all of the AWS files
# If using your own computer's files
if (usingOwnFile==TRUE) {awsDF <- as_tibble(list.files(path = data_dir_on_this_machine,full.names = TRUE, include.dirs = TRUE,recursive = TRUE)) |> rename(Key = value) }
# filter possible files
data_file <- awsDF |> 
          filter(!grepl(pattern = "*.old*",x = Key, ignore.case = TRUE)) |>
          filter(!grepl(pattern = "*.previous*",x = Key, ignore.case = TRUE))  |>
          filter( grepl(pattern = "*.eadyForAnalysis*",x = Key, ignore.case = TRUE)) |> 
          filter( grepl(pattern = "*.Subset_*",x = Key, ignore.case = TRUE))
# Once there's only one file, change it to a string
data_file <- data_file$Key
data_file
```

Open the dataset

```{r open}
if (ignoreAWS==FALSE)   {df_temp <- aws.s3::s3read_using(read_rds, object = data_file,bucket = "beam-core-act")}
if (usingOwnFile==TRUE) {df_temp <- read_rds(file = paste0(data_file) )}
remove(awsDF)
```

```{r describeDataset}
## Find the levers
df_temp <- ungroup(df_temp)
lever_vars  <- names(df_temp |> select(contains("lever")))
leverLevelsLst_fltsz <- levels(as.factor(df_temp$lever_position_fleetsize))
leverlevelsStr_fltsz <- paste(leverLevelsLst_fltsz, collapse="  ")
leverLevelsLst_price <- levels(as.factor(df_temp$lever_position_price))
leverlevelsStr_price <- paste(leverLevelsLst_price, collapse="  ")
#Description
html(contents(df_temp),  levelType='table')
print(glue("
               Scenario: {categoryTitleLong} ({categoryTitleShort}),
                  lever: {leverTitleLong} ({leverTitleShort}),
           levels Price: {leverlevelsStr_fltsz}
           levels Size : {leverlevelsStr_price}
          Het variables: {listHetnames}
            Y variables: {listYnames}"))
```

```{r}
source(paste0            (getwd(),    "/51__GraphTheme.R"))
```

------------------------------------------------------------------------

# .................... End

------------------------------------------------------------------------

# .

# ~~ANALYSIS~~

```{r}
df_temp <- ungroup(df_temp)
```

```{r}
df_tiny <- df_temp |>
  group_by(lever_position_price,
           ntile(duration_door_to_door,4)
           # lever_position_price,
           # originalDataset,
           # mandatoryCat,
           # mode_5actual,
           # mode_5planned,
           # mode_5plannedAtBaseline,
           # auto_ownership
           # ,income100levels
           ) |>
  summarise(
          across(where(is.numeric),~mean(.x),.names = "{.col}_avg"),
            across(where(is.factor ),~n_distinct(.x),.names = "{.col}_Ndis"),
    NpersonTripObs = n(),
             .groups = "drop")
```

## Default min max values

```{r}
# Min max
price_min <- filter(description_CSV, variable == "pr")[["scaleLow"]]
price_max <- filter(description_CSV, variable == "pr")[["scaleHigh"]]
fltsz_min <- filter(description_CSV, variable == "flsz")[["scaleLow"]]
fltsz_max <- filter(description_CSV, variable == "flsz")[["scaleHigh"]]
# TITLE
  tmp_graphTitle <<- str_glue("{year} {categoryTitleLong} {leverTitleLong}")
```

# Make graph dataset

```{r}
df_graph_temp <- df_temp |> 
  group_by(lever_position_price) |> 
  rename(`Lever Position Price` = lever_position_price) |> 
  count( mode_5planned) |> 
  mutate(`Total Trips` = sum(n)) |> 
  mutate(`Percent of Total Trips` = n /`Total Trips` ,
         n = NULL)
df_graph_temp
df_graph_tempWide <- df_graph_temp |> 
  pivot_wider(names_from = mode_5planned, values_from = `Percent of Total Trips`) |> 
  mutate(`Ride Hail Total` = `Ride Hail Pooled`+`Ride Hail Solo`)
print(df_graph_tempWide)
```

## graph Price vs.  % trips

```{r define x y axis scales}
# p0 <- fx_get_TitlesLevels_createBaseGraph_g0(y_var = `Lever Position Price`)
p1 <- ggplot(df_graph_tempWide, aes(x = `Lever Position Price`)) +
      theme(legend.position = "right") +
      ylab("Percentage of trips") +
      theme(aspect.ratio = .9) + 
      coord_cartesian(xlim = c(price_min,price_max)) +
      coord_cartesian(ylim = c(0,  max(max(df_graph_tempWide$`Ride Hail Total`),
                                       max(df_graph_tempWide$Transit),
                                       max(df_graph_tempWide$`Walk or Bike`))))

p2 <- p1 +  geom_line(aes(y = `Ride Hail Solo`  , color = "Ride Hail Solo")) +
            geom_line(aes(y = `Ride Hail Pooled`, color = "Ride Hail Pooled"  )) +
            geom_line(aes(y = `Ride Hail Total` , color = "Ride Hail Total" )) 
p2
```

```{r}
p5 <- p1 + geom_line(aes(y = `Walk or Bike` , color = "Walk or Bike")) +
           geom_line(aes(y = `Transit`      , color = "Transit"))
p6 <- p5 + geom_line(aes(y = `Car`          , color = "Car"))
p7 <- p5 + geom_line(aes(y = `Car`- 
                           df_graph_tempWide$Car[`Lever Position Price`==0.05] , 
                         color = "Car rel to P=0"))
p8 <- p1 + geom_line(aes(y = `Walk or Bike`- 
                           df_graph_tempWide$`Walk or Bike`[`Lever Position Price`==0.05] , 
                         color = "Walk or Bike")) +
           geom_line(aes(y = `Transit`- 
                           df_graph_tempWide$`Transit`[`Lever Position Price`==0.05] , 
                         color = "Transit")) +
           geom_line(aes(y = `Car`- 
                           df_graph_tempWide$Car[`Lever Position Price`==0.05] , 
                         color = "Car")) +
  ylab("Percentage CHANGE in trips
       Relative to RH Price = 0.05")
p8 

```

## Stack graphs

```{r}
# p6 <- p5 + stat_difference(aes(ymin = `Ride Hail Pooled`, 
#                                ymax = `Ride Hail Not-Pooled`), alpha = 0.3)
# print(p6)
# my_layout <- c(area(t=1,b=1,l=1,r=1),
#                area(t=2,b=2,l=1,r=1),
#                area(t=1,b=2,l=2,r=2))
print(get_dim(p8))
my_layout <- "
1
2
"
# plot(my_layout) # Show the layout to make sure it looks as it should
pFinal <- (p2 + xlab("") ) + (p8 + xlab("RH price")) + plot_layout(design = my_layout,
                                 widths =unit(c(3.25,3.25),c('in','in')),
                                 heights = unit(c(2,2),c('in','in'))
                                 )
pFinal  
ggsave(filename = paste0(data_dir_on_this_machine,"output/PriceXqpercentage.png"), plot = pFinal)
```

Now start doing analysis and graphs

# Distribution graphs

```{r}
# fx_graph_Distn_Internal_Heterogeneity
g3 <- fx_graph_Distn_Internal_Heterogeneity(
  df=df_temp,
  y_var = "Potential_INEXUS_in_dollar",
  het = "incomeXcar")
print(g3[["gwrapped"]])
```

```{r}
# | echo: false
g1meta <- 
  map(.x = listY, 
      ~ map2(.x = .x, .y = listHet,
             ~ fx_META_graph_choose(df = df_temp , y_var = .x, het = .y ,
                                     totalGr=TRUE,
                                     hetGr = FALSE,
                                     saveGraph = TRUE     )))
print(g1meta)
```
