---
title: "Troubleshooting -- Graphs formatting and size"
format: html
---

## Troubleshoot Graphs

## Source Files

Define file pathways for data and output

```{r }
t <- "/00__global_file_directories.R"
print(paste("opening source file ", t))
source( paste0(getwd(),t) ) # returns: 
figures_folder <- paste0(output_dir_on_this_machine,"figures")
print(paste("defining file location ",figures_folder))
# data_file_list_paths_local <- awsDF$Key[grep(pattern = "*.deep*", awsDF$Key)]
```

Open libraries and define functions

```{r }
t <- "/02__SetupFunctions.qmd"
print(paste("opening source file ", t))
rmarkdown::render(paste0(getwd(),t))
```

## test how this looks by Rendering this

width height

Graphics device test of graphic size and dpi

Make sure width and size are consistent with what i see. This is what I see in the GUI, and\
mmmmmThis text is two inches:

```{r test, echo=FALSE}
df <- tibble::tribble( ~x, ~y, ~name,
  1,  1,  "12pt font",
  3,  3,  "f",
  2,  2,  "This text is two inches")
OneInchInmm <- 25.4
mmOf12ptFont <- 12 / .pt
device.size.px <- dev.size(units="px")
device.size.in <- dev.size(units="in")
device.size.px.per.in <- dev.size("px")/dev.size("in")


# Test graph
ggplot(df, aes(x = x, y = y, label = name)) +
  geom_text(size = mmOf12ptFont) +
  geom_point(size = mmOf12ptFont, shape = 7) +
  geom_point(size = 2*OneInchInmm, shape = 7) +
  theme( plot.title = element_text(size = 12)) +
  # The graph title has info about the size of the graphics in it
  labs(title = paste(
  "This text is two inches 
[IT IS 12 POINT FONT][which is 12char per inch]
---size of text and points within the graph is in mm, .pt is a var in ggplot
---where the mm are font size / .pt, so for font size 12, mm are", 12/.pt,"mm.
---the boxes are two inches, which is 2 times 12 /.pt,",12/.pt,"mm.
[This PLOT SIZE IS probably 7.3 WIDTH, 4.5 HEIGHT:
---- ",dev.size("in")[1],"by", dev.size("in")[2],"same as",device.size.in[1],device.size.in[2],"
[device size pixels rstudio, and for rendered:",dev.size("px")[1],"by",dev.size("px")[2],device.size.px[1],device.size.px[2],"
[furthermore if you set the break at 48 columns'][then this is 4in and, total is 8 inches across]
---Pix per inch:", dev.size("px")/dev.size("in"),"or", device.size.px.per.in,". range:", par("usr"),   par("usr")[c(2,4)] - par("usr")[c(1,3)],
"---Pct devoted to plot:", par("plt")[c(2,4)] - par("plt")[c(1,3)][1],par("plt")[c(2,4)] - par("plt")[c(1,3)][2],
"
[This text is     [this's one]               This text is two inches", 
""))   +
  labs(x = "Culmen Length (mm)")
# [Number of pixels per plot inch x and y: ",dev.size(units="px") * par("plt")[c(2,4)] - par("plt")[c(1,3)] / (par("usr")[c(2,4)] - par("usr")[c(1,3)])[1],"
# --Plot size:", dev.size(units="in") * par("plt")[c(2,4)] - par("plt")[c(1,3)][1],dev.size(units="in") * par("plt")[c(2,4)] - par("plt")[c(1,3)][2],
ggsave(filename = paste0("test.svg"), path = figures_folder, width  = dev.size("in")[1], height = dev.size("in")[2])
ggsave(filename = paste0("test.png"), path = figures_folder, width  = dev.size("in")[1], height = dev.size("in")[2])
ggsave(filename = paste0("test.pdf"), path = figures_folder, width  = dev.size("in")[1], height = dev.size("in")[2])
rm(df)
```

This is the pdf version, and\
mmmmmThis text is two inches:

![](output/figures/test.pdf)

This is the png version, and\
mmmmmThis text is two inches:

![](output/figures/test.png)

This is the svg version, and\
mmmmmThis text is two inches:

![](output/figures/test.svg)

## notes

Note on looping using purrr maps:

With imap, going through a list using a \|\> , .x is the thing in the list, and .y is the name of the thing in the list. So like, .x is each dataframe in the list, and .y is the name of the dataframe in the list. The other way is map2( .x = df_in_a\_list, .y = names(df_in_a\_list), \~fx_H

editor content width: 459
