---
title: "Untitled"
format: html
---

# Setup

Libraries and functions, and define a directory if one exists on this machine. Open the csv file that lists all of the titles and colors etc

```{r }
source(paste0            (getwd(),    "/00__global_file_directories.R"))
source(paste0            (getwd(),    "/02__SetupLibrary.R"))
source(paste0            (getwd(),    "/51__GraphTheme.R"))
```

```{r }
placeTitleShort <- "sf"
year <- "2018"
leverTitleShort <- "priceXfleetsz"
categoryTitleShort <- "rh"
```

# ,.,....,.,.,.,

# Create Dataset

# If needed

# Make New Small Dataset?

```{r rewrite small dataset}
rewrite <- 0  # 0 if do not want to make a new one
ignoreAWS <- TRUE
usingOwnFile <- TRUE
```

```{r list the available datasets in a dataset}
if (rewrite==1) {
    if (ignoreAWS==FALSE) {awsDF <- get_bucket_df("beam-core-act", 
                           prefix = "deepDive/CleanData/SanFrancisco") } # dataframe with all of the AWS files
    if (usingOwnFile==TRUE) {awsDF <- as_tibble(list.files(path = data_dir_on_this_machine,full.names = TRUE, include.dirs = TRUE,recursive = TRUE)) |> rename(Key = value) }
    data_file <- awsDF |> 
              filter(!grepl(pattern = "*.old*",x = Key, ignore.case = TRUE)) |>
              filter(!grepl(pattern = "*.previous*",x = Key, ignore.case = TRUE))  |>
              filter( grepl(pattern = "*.eadyForAnalysis*",x = Key, ignore.case = TRUE)) 
    data_file <- data_file |> 
              filter( grepl(pattern = "*.Subset_*",x = Key, ignore.case = TRUE)) |> 
              filter( grepl(pattern = "*.paired*",x = Key, ignore.case = TRUE))
    (data_file <- data_file$Key)  # Once there's only one file, change it to a string
    
    if (ignoreAWS==FALSE)   {df_temp <- aws.s3::s3read_using(read_rds, object = data_file,bucket = "beam-core-act")}
    if (usingOwnFile==TRUE) {df_temp <- read_rds(file = paste0(data_file) )}
    remove(awsDF) }
```

```{r}
if (rewrite==1) {
        df_temp_small <- df_temp |> 
          select(
            contains("lever_position"),
            contains("mandatory"),
            # Y vars
            contains("choice"),
            contains("mode"),
            contains("Potential"),
            contains("PotInex"),
            contains("duration"),
            contains("time"),
            # Demographics
            contains("IDMerged"),
            contains("tripIndex"),
            contains("income")
          )
}
```

```{r rank by income}
if (rewrite==1) {
  df_temp_small <- df_temp_small |> 
          group_by(lever_position_fleetsize,lever_position_price) |>
          mutate(incomeRank1to21 = ntile(income_in_thousands,21)) |>
          mutate(incomeRank0to20 = incomeRank1to21-1) |>
          mutate(incomePercentRank0to20 = incomeRank0to20/20 ) |>
          mutate(incomePercentRank0to20b= percent_rank(incomeRank1to21))  
          # mutate(incomeRankEveryPerson1toN = min_rank(income_in_thousands)) |>
          # mutate(incomePercentRankEveryPerson0to1 = percent_rank(income_in_thousands)) 
  # df_temp_small <- df_temp_small |> 
  #         arrange(incomeRank0to20) |>       
  #         mutate(incomeCumByRankEveryPerson1toN = cumsum(income_in_thousands))
    df_temp_small <- ungroup(df_temp_small)
    
    df_temp_small <- df_temp_small |> mutate(lever_position_fleetsizeXprice = 
                                   paste0(lever_position_fleetsize,"; "
                                          ,lever_position_price))
}
```

```{r}
if (rewrite==1) {
  df_temp_small <- df_temp_small |> 
    mutate(mode_RHplanned = 
      case_when(
        mode_5planned == "Ride Hail Pooled" ~ 1,
        mode_5planned == "Ride Hail Solo" ~ 1,
        TRUE ~ 0
      ))
df_temp_small <- df_temp_small |> 
    mutate(mode_RHplannedAtBaseline = 
      case_when(
        mode_5plannedAtBaseline == "Ride Hail Pooled" ~ 1,
        mode_5plannedAtBaseline == "Ride Hail Solo" ~ 1,
        TRUE ~ 0
      ))
df_temp_small <- df_temp_small |> 
    mutate(mode_switchedFromBaseline = 
      case_when(
        mode_RHplannedAtBaseline != mode_RHplanned ~ 1,
        TRUE ~ 0
      ))

df_temp_small <- df_temp_small |> 
    mutate(PotInex_RelativeToBaseline =
             Potential_INEXUS_in_dollar - PotInex_atBaseline)
}
```

```{r Save Ranked}
if (rewrite==1) {
readr::write_rds(df_temp_small, file = paste0(data_dir_on_this_machine,
                   glue("{placeTitleShort}_{year}_",
                        "{categoryTitleShort}_{leverTitleShort}_",
                        "ranked",
                        "_21",   
                        ".rds"  )))
}
```

```{r open ranked}
if (rewrite==1) {
  # df_lorenz <- readRDS("C:/Users/annik/tmpOnATBcomputer/data/sf_2018_rh_priceXfleetsz_100cumForLorenz_31.rds")
df_temp_small <- readr::read_rds(file = paste0(data_dir_on_this_machine,
                   glue("{placeTitleShort}_{year}_",
                        "{categoryTitleShort}_{leverTitleShort}_",
                        "ranked",
                        "_21",   
                        ".rds"  )))
df_temp_small <- ungroup(df_temp_small)
}
```

# Collapse to Lorenz

```{r}
if (rewrite==1) {
df_lorenz  <-   df_temp_small |> 
  group_by(lever_position_fleetsize, 
           lever_position_price,
           incomeRank0to20) |> 
  summarise(across(where(is.numeric),~mean(.x),.names = "{.col}_avg"),
            nRH_planned = sum(mode_RHplanned),
            nRH_plannedAtBaseline = sum(mode_RHplannedAtBaseline),
            nSwitched_RH = sum(mode_switchedFromBaseline),
            Pot_BetterWorse = mean(PotInex_RelativeToBaseline),
            NpersonTripObs = n(),
            .groups = "drop") 
}
```

```{r collapse}
if (rewrite==1) {
## Filter (only those who switched? only those who rode transit?)
# levels(as.factor(df_temp$mode_5planned))
# df_temp_small <- df_temp_small 
# # |> 
# #     filter(mode_5plannedAtBaseline == "Ride Hail Pooled" | 
#              # mode_5plannedAtBaseline == "Ride Hail Solo")
# # Collapse into averages
#   df_lorenz <- df_temp_small |>
#      group_by(lever_position_fleetsize,lever_position_price
#               ,
#                # mandatoryCat,
#                # mode_5actual,mode_5planned,mode_5plannedAtBaseline,
#                # auto_ownership,
#                # income100levels
#               incomeRank0to20
#               # incomeRankEveryPerson1toN
#               # incomePercentRankEveryPerson0to1
#                ) |>
#       summarise(
#               across(where(is.numeric),~mean(.x),.names = "{.col}_avg"),
#                 across(where(is.factor ),~n_distinct(.x),.names = "{.col}_Ndis"),    
#       NpersonTripObs = n()) 
#   df_lorenz <- ungroup(df_lorenz)
}
```

```{r rank example}
min_rank(1:10)
percent_rank(1:10)
(min_rank(1:10)-1)/9
min_rank(0:10)
percent_rank(0:10)
ntile(1:11,11)
percent_rank(1:11)
(ntile(1:11,11)-1)/10
```

## Save Small dataset

```{r}
if (rewrite==1) {
readr::write_rds(df_lorenz, file = paste0(data_dir_on_this_machine,
                   glue("{placeTitleShort}_{year}_",
                        "{categoryTitleShort}_{leverTitleShort}_",
                        "lorenz",
                        "_21",   
                        ".rds"  )))
}
```

# Open small dataset

## Remake Cumulatives?

```{r}
remakeCum <- 0
```

```{r open100lorens}
if (remakeCum == 1) {
# df_lorenz <- readRDS("C:/Users/annik/tmpOnATBcomputer/data/sf_2018_rh_priceXfleetsz_100cumForLorenz_31.rds")
df_lorenz <- readr::read_rds(file = paste0(data_dir_on_this_machine,
                   glue("{placeTitleShort}_{year}_",
                        "{categoryTitleShort}_{leverTitleShort}_",
                        "lorenz",
                        "_21",   
                        ".rds"  )))
df_lorenz <- ungroup(df_lorenz)
}
```

## Make Cumulatives

```{r}
# Make cumulative and cumulative percent
if (remakeCum == 1) {
  df_lorenz <- df_lorenz |> 
    group_by(lever_position_fleetsize,lever_position_price)|>
      arrange(incomeRank0to20, .by_group = TRUE) |>
      # arrange(incomeRank0to20_avg) |> 
        rename(income = income_in_thousands_avg) |> 
        mutate(incomeCum = cumsum(income)) |> 
        mutate(incomePctOfTotal = income / max(incomeCum)) |> 
        mutate(incomeCumPctOfTotal =  incomeCum / max(incomeCum)) |> 
        rename(incRank = incomeRank0to20) |> 
        mutate(incPercentRank = incomePercentRank0to20_avg) |> 
  
        mutate(incomeAverage = mean(income)) |> 
        mutate(incomeAverageCum = cumsum(incomeAverage)) |> 
        mutate(incomeAveragePct = incomeAverage / max(incomeCum)) |> 
        mutate(incomeAveragePctCum = cumsum(incomeAveragePct)) |> 
  
  
        rename(DoorToDoorTime =  duration_door_to_door_avg) |> 
        mutate(DoorToDoorTimeCum = cumsum(DoorToDoorTime)) |> 
        mutate(DoorToDoorTimePctOfTotalTime = DoorToDoorTime/max(DoorToDoorTimeCum)) |> 
        mutate(DoorToDoorTimeCumPctOfTotal = DoorToDoorTimeCum/max(DoorToDoorTimeCum)) |> 
        
        mutate(DoorToDoorTimeAverage = mean(DoorToDoorTime)) |> 
        mutate(DoorToDoorTimeAverageCum = cumsum(DoorToDoorTimeAverage)) |> 
        mutate(DoorToDoorTimeAveragePctOfTotalTime = DoorToDoorTimeAverage/max(DoorToDoorTimeAverageCum)) |> 
        mutate(DoorToDoorTimeAveragePctOfTotalTimeCum = DoorToDoorTimeAverageCum/max(DoorToDoorTimeAverageCum)) |> 

          ungroup()
df_lorenz <- df_lorenz |> 
    group_by(lever_position_fleetsize,lever_position_price)|>
      arrange(incRank, .by_group = TRUE) |>
 
        rename(PotInex =  Potential_INEXUS_in_dollar_avg) |> 
        mutate(PotInexCum = cumsum(PotInex)) |> 
        mutate(PotInexPctOfTotal = PotInex/max(PotInexCum)) |> 
        mutate(PotInexCumPctOfTotal = PotInexCum/max(PotInexCum)) |> 
                    ungroup()

}
```

## Scenarios

```{r}
if (remakeCum == 1) {
  levels(as.factor(df_lorenz$lever_position_fleetsize))
levels(as.factor(df_lorenz$lever_position_price))
df_lorenz <- df_lorenz |> mutate(lever_position_fleetsizeXprice = 
                                   paste0(lever_position_fleetsize,"; "
                                          ,lever_position_price))

df_lorenz |> group_by(lever_position_fleetsize, lever_position_price, lever_position_fleetsizeXprice) |> 
  summarise(n = n())

df_lorenz <- df_lorenz |> 
  mutate(lever_position_price_Char = as.character(lever_position_price))
}
```

## Save Lorenz dataset

```{r}
if (remakeCum == 1) {
  readr::write_rds(df_lorenz, file = paste0(data_dir_on_this_machine,
                   glue("{placeTitleShort}_{year}_",
                        "{categoryTitleShort}_{leverTitleShort}_",
                        "lorenzWithCums",
                        "_21",   
                        ".rds"  )))
}
```

# ,

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# : GRAPHS :

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

```{r Open Lorenz dataset}
# df_lorenz <- readRDS("C:/Users/annik/tmpOnATBcomputer/data/sf_2018_rh_priceXfleetsz_100cumForLorenz_31.rds")
df_lorenz <- readr::read_rds(file = paste0(data_dir_on_this_machine,
                   glue("{placeTitleShort}_{year}_",
                        "{categoryTitleShort}_{leverTitleShort}_",
                        "lorenzWithCums",
                        "_21",   
                        ".rds"  )))
df_lorenz <- ungroup(df_lorenz)
```

```{r Get list of levers}
lever_vars  <- names(df_lorenz |> select(contains("lever")))
leverLevelsLst_fltsz <- levels(as.factor(df_lorenz$lever_position_fleetsize))
leverlevelsStr_fltsz <- paste(leverLevelsLst_fltsz, collapse="  ")
leverlevelsNum_fltsz <- as.numeric(leverLevelsLst_fltsz)
leverLevelsLst_price <- levels(as.factor(df_lorenz$lever_position_price))
leverlevelsStr_price <- paste(leverLevelsLst_price, collapse="  ")
leverlevelsNum_price <- as.numeric(leverLevelsLst_price)

placeTitleShort <- "sf"
year <- "2018"
leverTitleShort <- "priceXfleetsz"
categoryTitleShort <- "rh"

#Description
html(contents(df_lorenz),  levelType='table')
print(glue("
               Scenario: ({categoryTitleShort}),
                  lever:  ({leverTitleShort}),
           levels Price: {leverlevelsStr_fltsz}
           levels Size : {leverlevelsStr_price}"))
```

```{r Graph Theme}
# p0 <- fx_get_TitlesLevels_createBaseGraph_g0(y_var = `Lever Position Price`)
theme_update(legend.position = "right",
             aspect.ratio=1 # so that it's square 
             # coord_cartesian(xlim = c(0,NA)) # coord_cartesian(xlim = c(0,max(cum_income))) 
             )
# scale_color_gradient(breaks = as_vector(leverLevelsLst_price)) 
```

# , , , , , , , , , , , , , , , , , , , , ,

# ; Poster Graph -- Potential Better worse than baseline

```{r plot}

p1 <- ggplot(data = df_lorenz |> filter(lever_position_price > -1) |> 
                                 filter(lever_position_fleetsize == 1))
p1 <- p1 + aes(color = lever_position_price,
               group = lever_position_price_Char)
p8 <- p1 + aes(x =  incRank)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p8 <- p8 + geom_line(aes(y = Pot_BetterWorse)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
# Formatting
p8 <- p8 +
      ylab("Potential INEXUS relative to Baseline") +
      xlab("Income Rank (Percentiles of Income)") +
      labs(color = "RH Price") 
p9 <- p8 +
      # scale_color_continuous(guide = guide_colorsteps(
    # label.vjust = 0.8))
  scale_color_binned(breaks = c(leverlevelsNum_price),
                     guide = guide_colorsteps(show.limits = TRUE,
                     # guide = guide_colorbar(
                     label.vjust = 1.8 
                     # barheight = 12,
                     # ticks = TRUE, 
                     # ticks.linewidth = 2
     ))

p9
ggsave(plot = p9,filename = paste0(data_dir_on_this_machine,
                                   glue("graphs_all/RelativeINEX",
                                        Sys.Date(),
                                        ".png")))
```

```{r aspect ratio}
# Height and Width
my_aspRatio <- 1
pFinal <- p9 +
                theme(aspect.ratio = my_aspRatio) +
                plot_layout(design = "
                            1
                            ",
                            widths =unit(c(3.25),c('in','in'))
                            # ,
                            # heights = unit(c(4*2),c('in','in'))
                            )
pFinal  
ggsave(plot = pFinal,width = 6.25,height = 3.25*my_aspRatio, units = "in",
       filename = 
         paste0(data_dir_on_this_machine,
                 glue("graphs_all/RelativeINEXasp",
                                        Sys.Date(),
                                        ".png")))

```

# , , , , , , , , , , , , , , , , , , , , ,

# ; Actual Gini

```{r Actual Gini}
p1 <- ggplot(data = df_lorenz |> 
               filter(lever_position_price > -1) |> 
               filter(lever_position_fleetsize == 2.25)  )
p1 <- p1 + aes(color = lever_position_price,
               alpha = lever_position_fleetsize,
               group = lever_position_fleetsizeXprice)
pGini <- p1 + 
          aes(x =  incRank)  +
          geom_line(aes(y=incomeCumPctOfTotal)) +
          geom_line(aes(y = incomeAveragePctCum), alpha = .5, linetype = 2)
pGini
```

# , , , , , , , , , , , , , , , , , , , , ,

# ; Pot INEX not relative

```{r plot}
p1 <- ggplot(data = df_lorenz |> 
               filter(lever_position_price > -1) |> 
               filter(lever_position_fleetsize == 1 | lever_position_fleetsize == 2.25)  )
p1 <- p1 + aes(color = lever_position_fleetsizeXprice,
               # alpha = lever_position_fleetsizeXprice,
               group = lever_position_fleetsizeXprice)
p3 <- p1 + aes(x =  income)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p3 <- p3 + geom_line(aes(y = PotInex)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
# p3 <- p3 + geom_line(aes(y = PotInexAverage), alpha = .5, linetype = 2)                     # durationDoorDoorAvgAvg    durationDoorDoorAvgAvgCumPct
p3
p6 <- p1 + aes(x =  incRank)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p6 <- p6 + geom_line(aes(y = PotInex)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
# p6 <- p6 + geom_line(aes(y = PotInexAverage), alpha = .5, linetype = 2)                     # durationDoorDoorAvgAvg    durationDoorDoorAvgAvgCumPct
p6
p7 <- p1 + aes(x =  income)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p7 <- p7 + geom_line(aes(y = Pot_BetterWorse)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
p7
p8 <- p1 + aes(x =  incPercentRank)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p8 <- p8 + geom_line(aes(y = Pot_BetterWorse)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
p8

```

# , , , , , , , , , , , , , , , , , , , , ,

# ; Door Door Time

```{r plot}
p1 <- ggplot(data = df_lorenz |> 
               filter(lever_position_price > -1) |> 
               filter(lever_position_fleetsize == 1 | lever_position_fleetsize == 2.25)  )
p1 <- p1 + aes(color = lever_position_fleetsizeXprice,
               # alpha = lever_position_fleetsizeXprice,
               group = lever_position_fleetsizeXprice)
p3 <- p1 + aes(x =  income)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p3 <- p3 + geom_line(aes(y = DoorToDoorTime)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
p3 <- p3 + geom_line(aes(y = DoorToDoorTimeAverage), alpha = .5, linetype = 2)                     # durationDoorDoorAvgAvg    durationDoorDoorAvgAvgCumPct
p3
p6 <- p1 + aes(x =  incRank)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p6 <- p6 + geom_line(aes(y = DoorToDoorTime)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
p6 <- p6 + geom_line(aes(y = DoorToDoorTimeAverage), alpha = .5, linetype = 2)                     # durationDoorDoorAvgAvg    durationDoorDoorAvgAvgCumPct
p6
p8 <- p1 + aes(x =  incRank)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p8 <- p8 + geom_line(aes(y = DoorToDoorTimePctOfTotalTime)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
p8 <- p8 + geom_line(aes(y = DoorToDoorTimeAveragePctOfTotalTime), alpha = .5, linetype = 2)                     # durationDoorDoorAvgAvg    durationDoorDoorAvgAvgCumPct
p8
p4 <- p1 + aes(x =   incPercentRank)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p4 <- p4 + geom_line(aes(y = DoorToDoorTimeCumPctOfTotal)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
p4 <- p4 + geom_line(aes(y = DoorToDoorTimeAveragePctOfTotalTimeCum), alpha = .5, linetype = 2)                     # durationDoorDoorAvgAvg    durationDoorDoorAvgAvgCumPct
p4
p7 <- p1 + aes(x =   incRank)                         # incPercentRank income20levels income_in_thousands_avg incPct    incCumPct        incCumPct
p7 <- p7 + geom_line(aes(y = DoorToDoorTimeCum)) # duration_door_to_door_avg durationDoorDoorAvgPctCum
p7 <- p7 + geom_line(aes(y = DoorToDoorTimeAverageCum), alpha = .5, linetype = 2)                     # durationDoorDoorAvgAvg    durationDoorDoorAvgAvgCumPct
p7
```

# ..,.,.,

# extra notes

## Many lines

```{r many 45 degree lines}
priceLevelVector <- as.numeric(levels(as_factor(df_lorenz$lever_position_fleetsize)))
p3 <- p2 +   map( .x = priceLevelVector, 
                  ~ geom_segment(x=0, y=0,
                                 xend=1,yend= max(df_lorenz |> 
                                                  filter(lever_position_fleetsize==.x) |> 
                                                  select(.data[[yvar]])),
                        color = "grey", alpha = .5, linetype = 2))
p3
```
